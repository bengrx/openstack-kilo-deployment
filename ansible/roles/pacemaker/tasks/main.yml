---

 - name: Installed required packages for HA deployment
   apt: pkg={{ item }} state=installed
   with_items:
   - pacemaker
   - crmsh
   - corosync
   - cluster-glue
   - resource-agents
   - libvotequorum6
   - drbd8-utils
   - xfsprogs
   - python-mysqldb
   - mysql-server
   - lvm2

 - name: Ensure mysql is not started
   service: name=mysql state=stopped

 - name: Populate the answers needed for mysql installation
   shell: "{{ item }}"
   with_items:
   - echo mysql-server mysql-server/root_password select {{ keystone_admin_pass }} | debconf-set-selections
   - echo mysql-server mysql-server/root_password_again select {{ keystone_admin_pass }} | debconf-set-selections

 - name: Install the package linux-server if this is a virtual host
   apt: pkg=linux-server state=installed
   when: mysql_storage_device.find('vd') != -1

 - name: Copy the templated corosysc.conf file
   template: src=corosync.j2 dest={{ item }}/corosync.conf mode=644 owner=root group=root
   with_items:
   - /etc/default
   - /etc/corosync

 - name: Configure corosync to auto load on boot
   shell: echo "START=yes" > /etc/default/corosync

 - name: Ensure logging directory exists
   shell: mkdir -p /var/log/cluster/

 - name: Restart the corosync service
   service: name={{ item }} state=restarted
   with_items:
   - corosync
   - pacemaker

 - name: Delay for 15 seconds to allow the cluster to come up
   shell: sleep 15
   run_once: yes

 - name: Check health status of primary corosync ring
   shell: corosync-cfgtool -s | grep "ring 0 active with no faults" | wc -l
   register: corosync_ring_health
   failed_when: "{{ corosync_ring_health.stdout }} != 1"

 - name: Check health status of corosync node sync
   shell: corosync-cmapctl runtime.totem.pg.mrp.srp.members | grep "members.[1-2].join_count" | wc -l
   register: corosync_active_nodes
   failed_when: "{{ corosync_active_nodes.stdout }} != 2"

 - name: Check health status of pacemaker cluster
   shell: crm_mon -s | grep "Ok" | grep "[2-3] nodes online" 
   register: pacemaker_cluster_status

 - fail: msg="{{ pacemaker_cluster_status.stdout }}"
   when: pacemaker_cluster_status.stdout.find('Ok') == -1

 - name: Setting cluster properties
   shell: crm configure property {{ item }}
   with_items:
   - no-quorum-policy="ignore"
   - pe-warn-series-max="1000"
   - pe-input-series-max="1000"
   - pe-error-series-max="1000"
   - cluster-recheck-interval="5min"

 - name: Commit the cluster properties
   shell: crm configure commit

 - name: Instruct corosync to load quorum and messaging interfaces needed by pacemaker
   template: src=pcmk.j2 dest=pcmk

 - name: Get the masters real hostname
   shell: hostname -s
   delegate_to: "{{ openstack_ctl_master }}"
   register: hostname_master
   run_once: yes
   
 - name: Get the slaves hostname
   shell: hostname -s
   delegate_to: "{{ openstack_ctl_slave }}"
   register: hostname_slave
   run_once: yes

 - name: Copy the templated DRBD resource configuration for mysql data dir
   template: src=mysql.res.j2 dest=/etc/drbd.d/mysql.res

 - name: Copy the templated apparmor profile
   template: src=usr.sbin.mysqld.j2 dest=/etc/apparmor.d/usr.sbin.mysqld

 - name: restart the node
   command: shutdown -r now "Ansible updates triggered"
   async: 0
   poll: 0
   ignore_errors: true

 - name: waiting for node to come back online
   delegate_to: 127.0.0.1
   wait_for: host={{ inventory_hostname }}
             state=started
             port=22
             delay=15
             timeout=300
             connect_timeout=15
   sudo: false

 - name: Configure mysql for use with DRBD
   shell: drbdadm {{ item }}
   with_items:
   - create-md mysql; sleep 1
   - up mysql; sleep 1

 - name: Force mysql drbd device into R/W mode on master
   shell: drbdadm -- --force primary mysql
   delegate_to: "{{ openstack_ctl_master }}"

 - name: Ensure the area for new filesystem is not mounted
   shell: umount /mnt; sleep 1

 - name: Create a new filesystem on /dev/drbd0 device on the master
   shell: mkfs -t xfs -f /dev/drbd0
   delegate_to: "{{ openstack_ctl_master }}"

 - name: Mount the new xfs filesystem on drbd0 and initialise it
   shell: "{{ item }}"
   with_items:
   - mkdir /mnt; chmod -R 755 /mnt; sleep 1
   - chown -R mysql:mysql /mnt/
   - mount /dev/drbd/by-res/mysql/0 /mnt; sleep 1
   #- mysql_install_db --datadir=/mnt
   - mv /var/lib/mysql* /mnt; sleep 1
   - umount /mnt; sleep 1
   delegate_to: "{{ openstack_ctl_master }}"
   run_once: yes

 - name: Set the mysql drbd device back to secondary
   shell: drbdadm secondary mysql
   delegate_to: "{{ openstack_ctl_master }}"

 - name: Restart the corosync service
   service: name={{ item }} state=restarted
   with_items:
   - corosync
   - pacemaker

 - name: Add mysql resource to pacemaker
   script: configure-mysql-pacemaker.sh "{{ ctl_vip }}"
